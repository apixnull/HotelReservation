@model List<HotelReservation.Models.Reservation>

@{
    ViewData["Title"] = "Manage Reservations";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold">Manage Reservations</h2>
        <a class="btn btn-primary" asp-action="SearchRoom">Add New Reservation</a>
    </div>

    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white fw-bold">Reservation List</div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search by Guest Name / Booking Ref" />
                </div>
                <div class="col-md-3">
                    <select id="statusFilter" class="form-select">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="CheckedIn">Checked In</option>
                        <option value="CheckedOut">Checked Out</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
            </div>

            <table class="table table-hover align-middle" id="reservationsTable">
                <thead class="table-light">
                    <tr>
                        <th>Booking Ref</th>
                        <th>Guest Name</th>
                        <th>Room</th>
                        <th>Check-In</th>
                        <th>Check-Out</th>
                        <th>Status</th>
                        <th>Payment</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var reservation in Model)
                    {
                        <tr>
                            <td><span class="fw-semibold">@reservation.BookingReference</span></td>
                            <td>@reservation.GuestName</td>
                            <td>@(reservation.Room != null ? reservation.Room.RoomNumber : "N/A")</td>
                            <td>@reservation.CheckInDate.ToString("MMM dd, yyyy")</td>
                            <td>@reservation.CheckOutDate.ToString("MMM dd, yyyy")</td>
                            <td>
                                <span class="badge bg-@(reservation.Status == HotelReservation.Models.ReservationStatus.CheckedIn ? "success" : "warning")">
                                    @reservation.Status
                                </span>
                            </td>
                            <td>
                                @Html.Raw(reservation.IsPaid ? "<span class='badge bg-success'>Paid</span>" : "<span class='badge bg-danger'>Unpaid</span>")
                            </td>
                            <td>
                                <a class="btn btn-sm btn-info" asp-action="Details" asp-route-id="@reservation.ReservationId">View</a>
                                <a class="btn btn-sm btn-warning" asp-action="Edit" asp-route-id="@reservation.ReservationId">Edit</a>
                                <form method="post" asp-action="Delete" asp-route-id="@reservation.ReservationId" style="display:inline;">
                                    <button type="submit" class="btn btn-sm btn-danger" onclick="return confirmDelete(this);">Delete</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const statusFilter = document.getElementById("statusFilter");
            const tableRows = document.querySelectorAll("#reservationsTable tbody tr");

            function filterTable() {
                const searchValue = searchInput.value.toLowerCase();
                const statusValue = statusFilter.value.toLowerCase();

                tableRows.forEach(row => {
                    const bookingRef = row.cells[0].textContent.toLowerCase();
                    const guestName = row.cells[1].textContent.toLowerCase();
                    const rowStatus = row.cells[5].textContent.toLowerCase();

                    const matchesSearch = bookingRef.includes(searchValue) || guestName.includes(searchValue);
                    const matchesStatus = statusValue === "" || rowStatus.includes(statusValue);

                    row.style.display = (matchesSearch && matchesStatus) ? "" : "none";
                });
            }

            searchInput.addEventListener("input", filterTable);
            statusFilter.addEventListener("change", filterTable);
        });

        function confirmDelete(form) {
            Swal.fire({
                title: "Are you sure?",
                text: "This action cannot be undone!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit();
                }
            });
            return false;
        }
    </script>
}
